# copiar el runtime
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 5005 # puerto opcional para debugger remoto

# copiar el SDK
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0.100-rc.2 AS build
WORKDIR /src
COPY ["src/CleanArchitecture/CleanArchitecture.Domain/CleanArchitecture.Domain.csproj", "src/CleanArchitecture/CleanArchitecture.Domain/"]
COPY ["src/CleanArchitecture/CleanArchitecture.Application/CleanArchitecture.Application.csproj", "src/CleanArchitecture/CleanArchitecture.Application/"]
COPY ["src/CleanArchitecture/CleanArchitecture.Infraestructure/CleanArchitecture.Infraestructure.csproj", "src/CleanArchitecture/CleanArchitecture.Infraestructure/"]
COPY ["src/CleanArchitecture/CleanArchitecture.Api/CleanArchitecture.Api.csproj", "src/CleanArchitecture/CleanArchitecture.Api/"]

# restaurar paquetes
RUN dotnet restore "src/CleanArchitecture/CleanArchitecture.Api/CleanArchitecture.Api.csproj"
COPY . .
WORKDIR "/src/src/CleanArchitecture/CleanArchitecture.Api"
RUN dotnet build "CleanArchitecture.Api.csproj" -c Debug -o /app/build

FROM build AS publish
RUN dotnet publish "CleanArchitecture.Api.csproj" -c Debug -o /app/publish /p:UseAppHost=false

# etapa final: usamos SDK para permitir debuf
FROM build AS final
WORKDIR /app
COPY --from=publish /app/publish

# variables de entorno para hot reload y depuracion
ENV DOTNET_USE_POLLING_FILE_WATCHER=1
ENV DOTNET_RUNNING_IN_CONTAINER=1
ENV DOTNET_USE_POLLING_FILE_WATCHER=1

EXPOSE 80
EXPOSE 5005 # puerto opcional para debugger remoto


FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "CleanArchitecture.Api.dll"]
